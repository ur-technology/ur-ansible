---
# file: stage-miner.yml
# name: Master Miner Playbook

# This Playbook Deploys any number of miner virtual servers as defined below in 'droplets'
# Here we tell Ansible which hosts to work on. We want to operate on Digital Ocean
- hosts: digitalocean

# Here we tell Ansible what variables to load for this play
  vars_files:
    group_vars/secrets.yml

# Here we define the droplets we are going to deploy with this play
    droplets:
    - miner3.ur.technology

# Here we tell Ansible the tasks we want it to execute on the droplets above
  tasks:
    - name: Checking for the existence of the Automator SSH key.  
      user: >
        name=root
        generate_ssh_key=yes
        ssh_key_file=~/.ssh/automator-root-rsa

    - name: Making sure that our Automator SSH key exists in Digital Ocean.
      digital_ocean: >
        state=present
        command=ssh
        name=ur_ssh_key
        ssh_pub_key={{ lookup('file', '~/.ssh/automator-root-rsa.pub') }}
        api_token={{ do_token }}
      register: automator-ssh-key

    - debug: msg="The Automator SSH Key ID is  {{ automator-ssh-key.ssh_key.id }}"

# If this Playbook failes, it is most likely because Digital Ocean has changed the image ID of the
# image that we are trying to deploy.  The image ID should correspond to the Docker on Ubuntu image.
    - name: Deploying Droplets on the Digital Ocean platform...
      digital_ocean: >
        api_token="{{ do_token }}"
        backups_enabled=no
        command=droplet
        image_id=21132217
        name="{{ item }}"
        private_networking=yes
        region_id=tor1
        size_id=512mb
        ssh_key_ids="{{ automator-ssh-key.ssh_key.id }}"
        unique_name=yes
        virtio=yes
        wait=yes
        wait_timeout=300
      with_items: "{{ droplets }}"
      register: "{{ item }}"

# Most of the above steps should be broken down into roles, but at the present time it is much easier
# to do things this way because of the way the Ansible Digital Ocean module works.  From this point
# on, we automate our deployment the right way and we use nothing but roles...

roles:
  lin-common
  lin-ufw
  lin-fail2ban
  ur-common
  ur-gur
  ur-miner

# How easy was that?
